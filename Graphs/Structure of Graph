class GraphStructure {
    private class Vertex {
        HashMap<String, Integer> nbrs = new HashMap<>();
    }

    HashMap<String, Vertex> vtces;

    public GraphStructure() {
        vtces = new HashMap<>();
    }

    //2. Vertex Functions
    public int numVertex() {
        return this.vtces.size();
    }

    public Boolean containsVertex(String vname) {
        return (this.vtces.containsKey(vname));


    }

    public void addVertex(String vname) {
        Vertex vtx = new Vertex();
        vtces.put(vname, vtx);
    }

    //Important function.
    public void removeVertex(String vname) {
        Vertex vtx1 = vtces.get(vname);//2k(memory address)
        ArrayList<String> keys = new ArrayList<>(vtx1.nbrs.keySet());
        for (String key : keys) {
            Vertex v = vtces.get(key);

            v.nbrs.remove(vname);
        }
        vtces.remove(vname);
    }

    //3. Functions of edges
    public int numEdges() {
        ArrayList<String> keys = new ArrayList<>(vtces.keySet());
        int count = 0;
        for (String key : keys) {
            Vertex vtx = vtces.get(key);
            count = count + vtx.nbrs.size();
        }
        return count / 2;
    }

    public Boolean containsEdges(String vname1, String vname2) {
        Vertex vtx1 = vtces.get(vname1);
        Vertex vtx2 = vtces.get(vname2);
        if (vtx1 == null || vtx2 == null)
            return false;
        if (vtx1.nbrs.containsKey(vname2) && vtx2.nbrs.containsKey(vname1))
            return true;
        else
            return false;
    }

    public void addEdge(String vname1, String vname2, int cost) {
        Vertex vtx1 = vtces.get(vname1);//2k- memory address
        Vertex vtx2 = vtces.get(vname2);
        if (vtx1.nbrs.containsKey(vname2) == false || vtx1 == null)//if key is not present
            vtx1.nbrs.put(vname2, cost);// put 2nd edge with the given cost
        if (vtx2.nbrs.containsKey(vname1) == false || vtx2 == null)
            vtx2.nbrs.put(vname1, cost);
        else
            return;
    }

    public void removeEdge(String vname1, String vname2) {
        Vertex vtx1 = vtces.get(vname1);//2k- memory address
        Vertex vtx2 = vtces.get(vname2);
        if (vtx1.nbrs.containsKey(vname2) == false || vtx2.nbrs.containsKey(vname1) == false)
            return;
        vtx1.nbrs.remove(vname2);//removes C
        vtx2.nbrs.remove(vname1);//removes A

    }

    public void display() {
        ArrayList<String> a = new ArrayList<>(vtces.keySet());
        for (String key : a) {
            Vertex vtx = vtces.get(key);
            System.out.println(key + " : " + vtx.nbrs);

        }
        System.out.println("-------------------------");
    }
