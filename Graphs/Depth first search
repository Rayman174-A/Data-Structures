 public boolean dfs(String src, String dst) {
        HashMap<String, Boolean> processed = new HashMap<>();
        LinkedList<Pair> stack = new LinkedList<>();
        //creating a new pair
        Pair sp = new Pair();
        sp.vname = src;
        sp.psf = src;

        //put new pair in queue
        stack.addFirst(sp);
        while (!stack.isEmpty()) {
            Pair rp = stack.removeFirst();
            if (processed.containsKey(rp.vname)) {

                continue;
            }
            // Put in processed hashmap
            processed.put(rp.vname, true);

            //check for direct edge
            if (containsEdges(rp.vname, dst)) {
                System.out.println(rp.psf + dst);
                return true;
            }
            //nbrs
            ArrayList<String> v = new ArrayList<>(vtces.get(rp.vname).nbrs.keySet());
            for (String key : v) {
                // if key is not present in processed hashmap, only then add
                if (!processed.containsKey(key)) {
                    Pair np = new Pair();
                    np.vname = key;
                    np.psf = rp.psf + key;
                    stack.addFirst(np);
                }
            }
        }
        return false;
    }
