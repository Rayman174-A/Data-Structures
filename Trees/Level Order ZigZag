import java.util.*;
public class Main {

    static Scanner scn = new Scanner(System.in);

    public static void main(String[] args) {
        Main m = new Main();
        BinaryTree bt = m.new BinaryTree();
        bt.levelOrderZZ();
    }

    private class BinaryTree {
        private class Node {
            int data;
            Node left;
            Node right;
        }

        private Node root;
        private int size;

        public BinaryTree() {
            this.root = this.takeInput(null, false);
        }

        public Node takeInput(Node parent, boolean ilc) {

            int cdata = scn.nextInt();
            Node child = new Node();
            child.data = cdata;
            this.size++;

            // left
            boolean hlc = scn.nextBoolean();

            if (hlc) {
                child.left = this.takeInput(child, true);
            }

            // right
            boolean hrc = scn.nextBoolean();

            if (hrc) {
                child.right = this.takeInput(child, false);
            }

            // return
            return child;
        }

        public void levelOrderZZ() {
          Queue<Node> q=new LinkedList<>();
          Stack<Node> s=new Stack<>();
          s.push(root);
          Node node=null;
          while(true)
          {
              while(!s.isEmpty())
              {
                  node=s.pop();
                  System.out.print(node.data+" ");
                  if(node.right!=null)
                      q.add(node.right);
                  if(node.left!=null)
                      q.add(node.left);
              }
              while(!q.isEmpty())
              {
                  node=q.remove();
                  System.out.print(node.data+" ");
                  if(node.right!=null)
                  {
                      s.push(node.right);
                  }
                  if(node.left!=null)
                  {
                      s.push(node.left);
                  }
              }
			  if(q.isEmpty()&&s.isEmpty())
			  break;
          }

        }

    }

}
